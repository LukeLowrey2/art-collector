{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromURL","url","a","fetch","response","json","data","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Feature","props","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","className","length","map","key","baseimageurl","src","alt","Loading","Preview","searchResults","info","setSearchResults","setFeaturedResult","setIsLoading","fetchPage","pageUrl","results","console","error","disabled","prev","onClick","next","record","indx","event","preventDefault","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","allCenturies","allClassifications","onSubmit","queryResults","htmlFor","type","placeholder","value","onChange","target","name","idx","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c8f7604.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=56f683fd-8200-4a12-96d5-dd86050ad36f';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props\n\n  return (\n    <span className=\"content\">\n      <a href=\"#\" onClick={async (event) => {\n        event.preventDefault();\n        setIsLoading(true)\n\n        try {\n          const results = await fetchQueryResultsFromTermAndValue({ searchTerm, searchValue });\n          setSearchResults(results);\n        }\n        catch (err) {\n          console.error(err);\n        }\n        finally {\n          setIsLoading(false);\n        }\n\n      }}>{searchValue}</a>\n    </span>\n  )\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\nconst Feature = (props) => {\n\n  const { featuredResult } = props\n\n  if (!featuredResult) {\n\n    return <main id=\"feature\"></main>\n\n  }\n  const { title, dated, images, primaryimageurl, description, culture, style, technique, medium, dimensions, people, department, division, contact, creditline } = featuredResult\n\n\n\n  return <main id=\"feature\">\n    <div className=\"object-feature\">\n      <header>\n        <h3>{title}</h3>\n        <h4>{dated}</h4>\n      </header>\n      <section className=\"facts\">\n\n        {description\n          ? <Fragment>\n            <span className=\"title\"> Description: </span>\n            <span className=\"content\"> {description} </span>\n          </Fragment>\n          : null}\n\n        {culture\n          ? <Fragment>\n            <span className=\"title\"> Culture: </span>\n            <span className=\"content\"> {culture} </span>\n          </Fragment>\n          : null}\n\n        {style\n          ? <Fragment>\n            <span className=\"title\"> Style: </span>\n            <span className=\"content\"> {style} </span>\n          </Fragment>\n          : null}\n\n        {technique\n          ? <Fragment>\n            <span className=\"title\"> Technique: </span>\n            <span className=\"content\"> {technique} </span>\n          </Fragment>\n          : null}\n\n        {medium\n          ? <Fragment>\n            <span className=\"title\"> Medium: </span>\n            <span className=\"content\"> {medium} </span>\n          </Fragment>\n          : null}\n\n        {dimensions\n          ? <Fragment>\n            <span className=\"title\"> Dimensions: </span>\n            <span className=\"content\"> {dimensions} </span>\n          </Fragment>\n          : null}\n\n        {people\n          ? <Fragment>\n            <span className=\"title\"> People: </span>\n            <span className=\"content\"> {people} </span>\n          </Fragment>\n          : null}\n        \n        {department\n          ? <Fragment>\n            <span className=\"title\"> Department: </span>\n            <span className=\"content\"> {department} </span>\n          </Fragment>\n          : null}\n\n        {division\n          ? <Fragment>\n            <span className=\"title\"> Division: </span>\n            <span className=\"content\"> {division} </span>\n          </Fragment>\n          : null}\n\n        {contact\n          ? <Fragment>\n            <span className=\"title\"> Contact: </span>\n            <span className=\"content\"> {contact} </span>\n          </Fragment>\n          : null}\n\n        {contact\n          ? <Fragment>\n            <span className=\"title\"> Contact: </span>\n            <span className=\"content\"> {contact} </span>\n          </Fragment>\n          : null}\n\n        {creditline\n          ? <Fragment>\n            <span className=\"title\"> Creditline: </span>\n            <span className=\"content\"> {creditline} </span>\n          </Fragment>\n          : null}\n\n\n      </section>\n      <section className=\"photos\">\n          { images && images.length > 0 \n          ? images.map((images) => \n            <img key={images.baseimageurl} src={images.baseimageurl} alt={images.baseimageurl} />\n          ) : primaryimageurl \n          ? <img src={primaryimageurl } alt={primaryimageurl } />\n           : null\n        } \n        \n      </section>\n    </div>\n  </main>\n\n\n}\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\nconst Loading = () => {\n    return(\n         <div id=\"loading\">\n           <h2 className=\"message\">Searching...</h2>\n         </div>\n    )\n}\n\nexport default Loading;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\nconst { searchResults : {info, records}, setSearchResults, setFeaturedResult, setIsLoading} = props;\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={!info.prev} \n        className=\"previous\"\n        onClick={() => fetchPage(info.prev)}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next}\n        className=\"next\"\n        onClick={() => fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        records.map((record, indx) => {\n\n        \n        // Here we should map over the records, and render something like this for each one:\n          return <div  \n            key={ indx }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              event.preventDefault();\n              // set the featured result to be this record, using setFeaturedResult\n              setFeaturedResult(record)\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> :null\n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            \n            }\n          </div>\n          })\n        \n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  const { setIsLoading, setSearchResults } = props\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState('');\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n\n\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(async () => {\n    // Promise.all([fetchAllCenturies(), fetchAllCenturies()]).then(setCenturyList(), setClassificationList());\n    try {\n      let allCenturies = await fetchAllCenturies();\n      let allClassifications = await fetchAllClassifications();\n\n      setCenturyList(allCenturies)\n      setClassificationList(allClassifications)\n    } catch (err) {\n      console.error(err)\n    }\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const queryResults = await fetchQueryResults({ century, classification, queryString });\n      setSearchResults(queryResults);\n    }\n    catch (err) {\n      console.error(err);\n    }\n    finally {\n      setIsLoading(false);\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input\n        id=\"keywords\"\n        type=\"text\"\n        placeholder=\"enter keywords...\"\n        value={queryString}\n        onChange={(event) => setQueryString(event.target.value)} />\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({classificationList.length})</span></label>\n      <select\n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification}\n        onChange={(event) => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {\n          classificationList.map((classification, idx) => {\n            return <option key = {idx} value = {classification.name}>\n              {classification.name}\n            </option>\n          })\n        }\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({centuryList.length})</span></label>\n      <select\n        name=\"century\"\n        id=\"select-century\"\n        value={century}\n        onChange={(event) => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {\n          centuryList.map((century, idx) => {\n            return <option key = {idx} value = {century.name}>\n              {century.name} \n            </option>\n          })\n        }\n      </select>\n    </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = () => {\n    return(\n    <div id=\"title\">\n       <h1>\n         The Art Collector\n      </h1>\n      <h5>\n        Search the Harvard Art Museums' Private Collections\n      </h5>\n    </div>\n    )\n}\n\n export default Title;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// import {BASE_URL, KEY} from './api/index'\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\n// function fetchObjects() {\n//   const url = `${ BASE_URL }/object?${ KEY }`;\n\n//   fetch(url)\n//       .then(function (response) {\n//           return response.json()\n//       })\n//       .then(function (response) {\n//           console.log(response);\n//       })\n//       .catch(function (error) {\n//           console.error(error);\n//       });\n// }\n\n// fetchObjects();\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n   const [searchResults, setSearchResults] = useState({ info: {}, records: [] } );\n   const [featuredResult, setFeaturedResult] = useState(null);\n   const [isLoading, setIsLoading] = useState(false);\n\n     // const fetchSearchResults = async () => {\n  //   const response = await fetch(`${BASE_URL}`);\n  //   const searchData = await response.json();\n\n  //   setSearchResults(searchData);\n  // };\n\n  // const fetchFeaturedResults = async () => {\n  //   const response = await fetch(`${BASE_URL}`);\n  //   const featuredData = await response.json();\n\n  //   setFeaturedResult(featuredData);\n  // };\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setIsLoading = { setIsLoading } setSearchResults = { setSearchResults }/>\n\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults = {searchResults} setSearchResults = {setSearchResults} setIsLoading = {setIsLoading} setFeaturedResult = {setFeaturedResult} />\n\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature featuredResult = {featuredResult} setFeaturedResult = {setFeaturedResult} setIsLoading = {setIsLoading} setSearchResults = {setSearchResults}/>\n\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    {isLoading ? <Loading /> : null}\n      \n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);"],"sourceRoot":""}